import os 
from dotenv import load_dotenv
import nest_asyncio
from pydantic import BaseModel
from agents import Agent, Runner, OpenAIChatCompletionsModel, set_tracing_disabled, set_default_openai_client, set_default_openai_api, SQLiteSession
# from agents.run import RunConfig
from openai import AsyncOpenAI
from WebSearchTool import custom_web_search 
from openai.types.responses import ResponseTextDeltaEvent
from typing import Optional


class TradingResponse(BaseModel):
    question: str
    answer: str
    context: Optional[str] = None

class ToolAgent:
    """ Tool Agent that uses custom tool to get data from web with handoff from agent"""

    nest_asyncio.apply()
    def __init__(self):
        load_dotenv()
        # self.searchTool = WebSearchTool.custom_web_search()
        self.session = SQLiteSession("history_agent.db")

        self.API_KEY = os.getenv("OPENROUTER_API_KEY")
        if not self.API_KEY:
            raise ValueError("OPENROUTER_API_KEY not found in environment variables")


        self.client = AsyncOpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=self.API_KEY
        )
    
        self.model = OpenAIChatCompletionsModel(
            model='openai/gpt-oss-20b',
            openai_client=self.client
        )

        set_tracing_disabled(disabled=True)
        # set_default_openai_client(client=self.client, use_for_tracing=True)
        # set_default_openai_api("chat_completions")
        # self.config = RunConfig(
        #     model=self.model,
        #     model_provider=self.client,
        #     tracing_disabled=True
        # )

        self.agent = Agent(
            name="TradingAgent",
            instructions="Answer any question user asks related to Stock or Crypto only."
            "if the user asks prices or current market index you can use TradingAgent tool",
            model=self.model,
            tools=[custom_web_search] # dont add round brackets 
        )

        

    async def run(self):
        """Run the agent with a given message"""
        print("""
                This is a Trading agent asks questions only related to Crypto and Stocks.
                Enter 'exit' to exit the agent.
            """)
        while True:
            message = input("Enter a message for the agent: ")
            if message.lower() == "exit":
                print("\nExiting agent session...\n")
                break

            try:
                # results = Runner.run_sync(
                #     self.agent,
                #     message, 
                #     run_config=self.config,
                #     session=self.session
                # )
                # print("\nCalling Agent\n")
                # print(results.final_output)

                result = Runner.run_streamed(
                        self.agent,
                        message,
                        session=self.session
                    )

                # async for event in result.stream_events():
                #         if event.type == "raw_response_event" and isinstance(event.data, ResponseTextDeltaEvent):
                #             print(event.data.delta, end="", flush=True)

                collected_text = ""  # Streamed text collect karne ke liye
                async for event in result.stream_events():
                    if event.type == "raw_response_event" and isinstance(event.data, ResponseTextDeltaEvent):
                        collected_text += event.data.delta
                        print(event.data.delta, end="", flush=True)

                # Yahan pydantic ke through structure me wrap kar rahe hain
                response_obj = TradingResponse(
                    question=message,
                    answer=collected_text.strip(),
                    context="This answer is generated by TradingAgent using model validation."
                )

                print("\n\nFinal Structured Response:", response_obj.model_dump())

                # print(result.final_output)

                # return results.final_output
            except Exception as e:
                print(f"Error running agent: {e}")
                return None